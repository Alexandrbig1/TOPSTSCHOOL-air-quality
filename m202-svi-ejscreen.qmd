---
title: "SVI, TRI, and Health Outcomes"
format: html
---

## Overview

In this lesson, you will use....

## Learning Objectives

After completing this lesson, you should be able to:

-   Manipulating and processing raster data; mainly loading and cropping.
-   Exploring SVI/raster by mapping and processing different sub datasets (overall/racial/socioeconomic).
-   Connecting to APIâ€™s for pollution and public health data.
-   Geolocating tabular data with latitude and longitude.
-   Joining tabular data to spatial data (probably polygons).
-   Connecting to OpenStreetMap API for basemaps.
-   Creating regional basemaps.
-   Layering spatial data on basemaps.
    -   Semi-transparent SVI, TRI points, PLACES boundaries.
-   Creating maps with graduated point symbols for point source pollution releases.
-   Creating choropleths with census tract polygons for health outcomes data.
-   Zonal statistics with census tracts for:
    -   Mean SVI values

    -   Health outcomes summaries weighted by SVI.
-   (Maybe) Interpolate pollution load raster surface from point data.
-   Spatial correlation analysis between SVI, point pollution, and health outcomes. .

## Introduction

-   Lots of opportunities for different background information.

-   General air quality issues and EPA.

-   Air pollution data and data availability.

-   Social vulnerability, EJ, and NIMBY.

-   The difficulty of assessing health outcomes and types of publicly available data.

-   Possible brief discussion on scale and appropriate data.

## Load the Data

```{python}
import rioxarray as rio
import xarray as xr

file_path = "data/svi/svi_2020_tract_overall_wgs84.tif" 
# Open with rioxarray
svi = xr.open_dataset(file_path, engine="rasterio")

svi
```


```{python}
from pygris import metro_divisions
import matplotlib.pyplot as plt

# Get the default TIGER/Line file for counties in Michigan
detroit = metro_divisions()

detroit = detroit[detroit["NAME"].str.contains("Detroit")]
```

```{python}
detroit_svi = svi.rio.clip(detroit.geometry.values)
detroit_svi.band_data.plot(cmap = "Reds", aspect = 1, size = 5, cbar_kwargs =  {'orientation':'horizontal', 'label':'Social Vulnerability Index'})
```

```{python}
# places asthma url
"https://data.cdc.gov/resource/cwsq-ngmh.json?stateabbr=MI&measure=Current%20asthma%20among%20adults%20aged%20%3E=18%20years"
```

```{python}
# tri url
"https://data.epa.gov/efservice/tri_facility/state_abbr/MI/city_name/DETROIT/"
```
### Deployment

```{python}

```

```{python}
import matplotlib.pyplot as pl
import contextily as cx

extent = detroit.total_bounds[[0,2,1,3]]
detroit_svi = detroit_svi.rio.reproject("EPSG:4326")
detroit_boundary = detroit.to_crs(epsg=3857)

ax = detroit_boundary.boundary.plot(figsize=(10, 10))
# ax = detroit_svi.band_data.plot(alpha = 0.5)
cx.add_basemap(ax)
ax.set_title('Detroit Census MSA Boundary',fontsize=16)


# 
# detroit.boundary.plot(ax = ax1)
# pl.show()
```

Congratulations! .... Now you should be able to:

-   Test test...

## Lesson 3

In this lesson, we explored ....

[Lesson 3](https://ciesin-geospatial.github.io/TOPSTSCHOOL-air-quality/m203-grdiv1-pm25.html){.btn .btn-primary .btn role="button"}